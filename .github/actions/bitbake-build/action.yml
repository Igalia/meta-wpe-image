inputs:
  bitbake_buildname:
    default: 'build'
  bitbake_prefix:
    default: ''
  bitbake_machine:
    default: 'raspberrypi5'
  bitbake_target:
    default: 'core-image-weston-wpe'
  bitbake_source:
    default: 'source'
  repo_release:
    default: 'scarthgap'
runs:
  using: 'composite'
  steps:
    - name: Print environment
      shell: bash
      run:  |
        echo "Environment:"
        echo "======================================================================"
        echo "BITBAKE_BUILDNAME=${{ inputs.bitbake_buildname }}"
        echo "BITBAKE_MACHINE=${{ inputs.bitbake_machine }}"
        echo "BITBAKE_PREFIX=${{ inputs.bitbake_prefix }}"
        echo "BITBAKE_SOURCE=${{ inputs.bitbake_source }}"
        echo "BITBAKE_TARGET=${{ inputs.bitbake_target }}"
        echo "RELEASE=${{ inputs.repo_release }}"
        echo "======================================================================"
    - name: Download timestamp artifact
      uses: actions/download-artifact@v4
      with:
        pattern: timestamp.txt
        merge-multiple: true
    - name: Get timestamp prefix
      id: timestamp
      shell: bash
      run: |
        TIMESTAMP=$(cat timestamp.txt)
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
    - name: Clean the build dir
      shell: bash
      run:  |
        rm -rf ~/yocto-meta-wpe-image-${{ inputs.repo_release }}
        rm -rf ~/yocto-meta-wpe-image-${{ inputs.repo_release }}.tar
    - name: Download workdir artifact
      uses: actions/download-artifact@v4
      with:
        name: yocto-meta-wpe-image-${{ inputs.repo_release }}
        path:  ~/
    - name: Untar workdir
      shell: bash
      run:  |
        cd ~
        tar -xf yocto-meta-wpe-image-${{ inputs.repo_release }}.tar
        rm -rf ~/yocto-meta-wpe-image-${{ inputs.repo_release }}.tar
    - name: Build
      shell: bash
      run:  |
        cd ~/yocto-meta-wpe-image-${{ inputs.repo_release }}
        mkdir ~/yocto-meta-wpe-image-${{ inputs.repo_release }}/builds/
        cp /local-host.conf ~/yocto-meta-wpe-image-${{ inputs.repo_release }}/builds/
        ulimit -n 4096
        source sources/meta-wpe-image/scripts/setup-environment ${{ inputs.bitbake_buildname}} ${{ inputs.bitbake_machine }} ${{ inputs.bitbake_source }}
        MAX_RETRIES=5
        export ${{ inputs.bitbake_prefix }}
        for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i to fetch sources for $IMAGE..."
            if bitbake ${{ inputs.bitbake_target }} --runall=fetch; then
                echo "All sources fetched successfully."
                break
            fi

            if [ $i -lt $MAX_RETRIES ]; then
                echo "Retrying fetch process..."
            else
                echo "Max retries reached. Some sources may still be missing."
            fi
        done
        eval $(bitbake -e wpewebkit | grep -E "^B=")
        echo $B
        eval $(bitbake -e wpewebkit | grep -E "^WORKDIR=")
        echo $WORKDIR
        echo "one"
        eval $(bitbake -e wpewebkit | grep -E "^T=")
 
        ${{ inputs.bitbake_prefix }} bitbake ${{ inputs.bitbake_target }}
        TIMESTAMP=${{ steps.timestamp.outputs.timestamp }}
        GITHUB_PR_SHA=${GITHUB_SHA}
        echo "💿️ **Image for [${{ inputs.bitbake_buildname }}](https://wk-contrib.igalia.com/yocto/meta-wpe-image/${TIMESTAMP}-${{ inputs.bitbake_buildname }}/) (ref: ${GITHUB_PR_SHA}).**" > ~/ci-message-${TIMESTAMP}-${{ inputs.bitbake_buildname }}.txt

        set -x
        echo "two"
        [[ -f "${WORKDIR}/build/CMakeCache.txt" ]] && cat "${WORKDIR}/build/CMakeCache.txt"
        [[ -f "${WORKDIR}/build/cmakeconfig.h" ]] && cat "${WORKDIR}/build/cmakeconfig.h"
        echo "three"
        [[ -f "${WORKDIR}/build/CMakeCache.txt" ]] && cp "${WORKDIR}/build/CMakeCache.txt" /tmp/
        [[ -f "${WORKDIR}/build/cmakeconfig.h" ]] && cp "${WORKDIR}/build/cmakeconfig.h" /tmp/
        [[ -f "${T}/log.do_configure" ]] && cat "${T}/log.do_configure"
        [[ -f "${T}/log.do_compile" ]] && cat "${T}/log.do_compile"
    - name: Artifacts
      if: always()
      shell: bash
      run: |
        ls -lh ~/yocto-meta-wpe-image-${{ inputs.repo_release }}/builds/${{ inputs.bitbake_buildname }}/tmp/deploy/images/${{ inputs.bitbake_machine }}/
        TIMESTAMP=${{ steps.timestamp.outputs.timestamp }}
        s3cmd put -F ~/yocto-meta-wpe-image-${{ inputs.repo_release }}/builds/${{ inputs.bitbake_buildname }}/tmp/deploy/images/${{ inputs.bitbake_machine }}/${{ inputs.bitbake_target }}-${{ inputs.bitbake_machine }}.rootfs.wic.bmap \
            s3://yocto/${TIMESTAMP}-${{ inputs.bitbake_buildname }}/${{ inputs.bitbake_target }}-${{ inputs.bitbake_machine }}.wic.bmap
        s3cmd put -F ~/yocto-meta-wpe-image-${{ inputs.repo_release }}/builds/${{ inputs.bitbake_buildname }}/tmp/deploy/images/${{ inputs.bitbake_machine }}/${{ inputs.bitbake_target }}-${{ inputs.bitbake_machine }}.rootfs.wic.bz2 \
            s3://yocto/${TIMESTAMP}-${{ inputs.bitbake_buildname }}/${{ inputs.bitbake_target }}-${{ inputs.bitbake_machine }}.wic.bz2
        s3cmd put -F ~/yocto-meta-wpe-image-${{ inputs.repo_release }}/builds/${{ inputs.bitbake_buildname }}/tmp/deploy/images/${{ inputs.bitbake_machine }}/${{ inputs.bitbake_target }}-${{ inputs.bitbake_machine }}.rootfs-dbg.tar.bz2 \
            s3://yocto/${TIMESTAMP}-${{ inputs.bitbake_buildname }}/${{ inputs.bitbake_target }}-${{ inputs.bitbake_machine }}.dbg.tar.bz2
    - name: Comment on the pull request
      uses: mshick/add-pr-comment@v2
      with:
        message-id: ${{ inputs.bitbake_buildname }}-${{ steps.timestamp.outputs.timestamp }}
        message-path: |
             ~/ci-message-${{ steps.timestamp.outputs.timestamp }}-${{ inputs.bitbake_buildname }}.txt
    - name: Clean the tmp dir
      if: always()
      shell: bash
      run:  |
        rm -rf ~/yocto-meta-wpe-image-${{ inputs.repo_release }}/builds/${{ inputs.bitbake_buildname }}/tmp ~/ci-message-${{ steps.timestamp.outputs.timestamp }}-${{ inputs.bitbake_buildname }}.txt
